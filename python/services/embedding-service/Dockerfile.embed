# Base image: specific CUDA 12.8.1 devel on Ubuntu 22.04
FROM nvidia/cuda:12.8.1-cudnn-devel-ubuntu22.04

# Prevent interactive prompts and configure APT for stability
ENV DEBIAN_FRONTEND=noninteractive
RUN printf "Acquire::http::Pipeline-Depth 0;\nAcquire::http::No-Cache true;\nAcquire::BrokenProxy true;\n" > /etc/apt/apt.conf.d/99no-cache

# Install Python 3.11, minimal OS dependencies, and tools for downloading/extracting
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3.11 python3.11-venv python3-pip python3.11-dev \
    libgl1-mesa-glx libglib2.0-0 \
    ca-certificates wget xz-utils && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Ensure `python3` points to Python 3.11
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1

# Install FFmpeg static build with NVIDIA support (from BtbN's "latest" release)
ENV FFMPEG_TARBALL_FILENAME=ffmpeg-master-latest-linux64-gpl.tar.xz
ENV FFMPEG_DOWNLOAD_URL=https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/${FFMPEG_TARBALL_FILENAME}

RUN echo "Downloading FFmpeg from ${FFMPEG_DOWNLOAD_URL}" && \
    wget -q -O /tmp/ffmpeg.tar.xz "${FFMPEG_DOWNLOAD_URL}" && \
    mkdir -p /opt/ffmpeg && \
    tar -xJf /tmp/ffmpeg.tar.xz -C /opt/ffmpeg --strip-components=1 && \
    rm /tmp/ffmpeg.tar.xz && \
    ln -s /opt/ffmpeg/bin/ffmpeg /usr/local/bin/ffmpeg && \
    ln -s /opt/ffmpeg/bin/ffprobe /usr/local/bin/ffprobe && \
    ln -s /opt/ffmpeg/bin/ffplay /usr/local/bin/ffplay # Optional

# Set NVIDIA environment variables for GPU access and video capabilities
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video

# Set default port for FastAPI server
ENV PYTHON_PORT=3456

# Expose the port for FastAPI
EXPOSE 3456

# Set default volume mount point for public media
VOLUME ["/media"]

# Install Python dependencies (pinned in requirements.txt)
COPY python/services/embedding-service/requirements.txt .
RUN pip3 install --no-cache-dir -r requirements.txt

# Copy entire application code, including entrypoint script
COPY --chmod=755 python/services/embedding-service /app

# Set working directory
WORKDIR /app

# Final configuration
ENV PYTHONUNBUFFERED=1
# The CMD will be executed by the entrypoint
CMD ["python3", "server.py"]

# Use startup script as entrypoint
ENTRYPOINT ["/app/docker-entrypoint.sh"]